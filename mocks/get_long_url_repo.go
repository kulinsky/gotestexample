// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kulinsky/gotestexample/internal/app/query (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/get_long_url_repo.go -mock_names=Repository=MockQueryRepo -package=mocks github.com/kulinsky/gotestexample/internal/app/query Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQueryRepo is a mock of Repository interface.
type MockQueryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockQueryRepoMockRecorder
}

// MockQueryRepoMockRecorder is the mock recorder for MockQueryRepo.
type MockQueryRepoMockRecorder struct {
	mock *MockQueryRepo
}

// NewMockQueryRepo creates a new mock instance.
func NewMockQueryRepo(ctrl *gomock.Controller) *MockQueryRepo {
	mock := &MockQueryRepo{ctrl: ctrl}
	mock.recorder = &MockQueryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryRepo) EXPECT() *MockQueryRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockQueryRepo) Get(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockQueryRepoMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQueryRepo)(nil).Get), arg0, arg1)
}
