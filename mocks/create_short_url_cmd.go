// Code generated by MockGen. DO NOT EDIT.
// Source: integrationtest/internal/app/command (interfaces: Repository,IDGenerator)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/create_short_url_cmd.go -package=mocks -mock_names=Repository=MockCmdRepo,IDGenerator=MockIDGenerator integrationtest/internal/app/command Repository,IDGenerator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCmdRepo is a mock of Repository interface.
type MockCmdRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCmdRepoMockRecorder
}

// MockCmdRepoMockRecorder is the mock recorder for MockCmdRepo.
type MockCmdRepoMockRecorder struct {
	mock *MockCmdRepo
}

// NewMockCmdRepo creates a new mock instance.
func NewMockCmdRepo(ctrl *gomock.Controller) *MockCmdRepo {
	mock := &MockCmdRepo{ctrl: ctrl}
	mock.recorder = &MockCmdRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmdRepo) EXPECT() *MockCmdRepoMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockCmdRepo) Save(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCmdRepoMockRecorder) Save(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCmdRepo)(nil).Save), arg0, arg1, arg2)
}

// MockIDGenerator is a mock of IDGenerator interface.
type MockIDGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIDGeneratorMockRecorder
}

// MockIDGeneratorMockRecorder is the mock recorder for MockIDGenerator.
type MockIDGeneratorMockRecorder struct {
	mock *MockIDGenerator
}

// NewMockIDGenerator creates a new mock instance.
func NewMockIDGenerator(ctrl *gomock.Controller) *MockIDGenerator {
	mock := &MockIDGenerator{ctrl: ctrl}
	mock.recorder = &MockIDGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDGenerator) EXPECT() *MockIDGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockIDGenerator) Generate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockIDGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockIDGenerator)(nil).Generate))
}
